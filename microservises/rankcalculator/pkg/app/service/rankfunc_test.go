package service

import (
	"testing"
)

func TestRankCalculator_Parametric(t *testing.T) {
	type testCase struct {
		name     string
		input    string
		expected float64
	}

	tests := []testCase{
		{
			name:     "–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞",
			input:    "abcXYZ",
			expected: 0,
		},
		{
			name:     "–¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞",
			input:    "–∞–±–≤–≥–¥–ï–Å",
			expected: 0,
		},
		{
			name:     "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
			input:    "123456",
			expected: 1,
		},
		{
			name:     "–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
			input:    "!@#$%^",
			expected: 1,
		},
		{
			name:     "–°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "abc123!@#",
			expected: 0.6666666666666667,
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: 0,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏",
			input:    "a b c",
			expected: 0.4,
		},
		{
			name:     "–û–¥–∏–Ω Emoji",
			input:    "üòÄ",
			expected: 1,
		},
		{
			name:     "–ù–µ—Å–∫–æ–ª—å–∫–æ Emoji –∏ –±—É–∫–≤—ã",
			input:    "aüòÄbüê∂c",
			expected: 0.4,
		},
		{
			name:     "–ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã",
			input:    "‰Ω†Â•Ωabc",
			expected: 0.4,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			actual := calcRank(tc.input)
			if (actual-tc.expected) > 1e-9 || (tc.expected-actual) > 1e-9 {
				t.Errorf("Rank(%q) = %v, –æ–∂–∏–¥–∞–ª–æ—Å—å %v", tc.input, actual, tc.expected) // TODO –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å testifyassert
			}
		})
	}
}
